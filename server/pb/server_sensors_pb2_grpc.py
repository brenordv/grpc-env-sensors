# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from server.pb import server_sensors_pb2 as server_dot_pb_dot_server__sensors__pb2


class SensorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.save_reading = channel.unary_unary(
                '/SensorService/save_reading',
                request_serializer=server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_request.SerializeToString,
                response_deserializer=server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_response.FromString,
                )
        self.get_readings = channel.unary_unary(
                '/SensorService/get_readings',
                request_serializer=server_dot_pb_dot_server__sensors__pb2.request_limiter.SerializeToString,
                response_deserializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_multi_item_response.FromString,
                )
        self.get_reading = channel.unary_unary(
                '/SensorService/get_reading',
                request_serializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_request.SerializeToString,
                response_deserializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_response.FromString,
                )


class SensorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def save_reading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_readings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_reading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'save_reading': grpc.unary_unary_rpc_method_handler(
                    servicer.save_reading,
                    request_deserializer=server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_request.FromString,
                    response_serializer=server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_response.SerializeToString,
            ),
            'get_readings': grpc.unary_unary_rpc_method_handler(
                    servicer.get_readings,
                    request_deserializer=server_dot_pb_dot_server__sensors__pb2.request_limiter.FromString,
                    response_serializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_multi_item_response.SerializeToString,
            ),
            'get_reading': grpc.unary_unary_rpc_method_handler(
                    servicer.get_reading,
                    request_deserializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_request.FromString,
                    response_serializer=server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SensorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SensorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def save_reading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/save_reading',
            server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_request.SerializeToString,
            server_dot_pb_dot_server__sensors__pb2.new_sensor_reading_save_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_readings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/get_readings',
            server_dot_pb_dot_server__sensors__pb2.request_limiter.SerializeToString,
            server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_multi_item_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_reading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/get_reading',
            server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_request.SerializeToString,
            server_dot_pb_dot_server__sensors__pb2.sensor_reading_fetch_single_item_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
